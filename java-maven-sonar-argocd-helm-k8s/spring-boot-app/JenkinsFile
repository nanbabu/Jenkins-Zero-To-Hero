pipeline {
  agent any
  environment{
    NEXUS VERSION = "nexus3" 
    NEXUS PROTOCOL "http" 
    NEXUS URL = "54.167.43.126:8081" 
    NEXUS_REPOSITORY = "spring-boot" 
    NEXUS_CREDENTIAL_ID = "nexu" 
}
    
  
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/nanbabu/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://107.21.79.115:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sona', variable: 'sona')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$sona -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
   
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "nanbabu"
        }
        steps {
            withCredentials([string(credentialsId: 'githob', variable: 'githob')]) {
                sh '''
                    git config user.email "nandakumar27reddy@gmail.com"
                    git config user.name "nanbabu"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/4/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${githob}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
      
stage("Publish to Nexus Repository Manager") { 
  steps { 
    script { 
      pom readMavenPom file: "pom.xml"; 
      filesByGlob findFiles(glob: "target/*.${pom.packaging)"); 
      echo "${filesByGlob[0].name} ${filesByGlob[0].path) $(filesByGlob[0].directory} ${filesByGlob[0].length) ${filesByGlob[ 
      artifactPath = filesByGlob[0].path; 
      artifactExists = fileExists artifactPath; 
      if(artifactExists) { 
          echo "*** File: ${artifactPath), group: $(pom.groupId), packaging: ${pom.packaging}, version ${pom.version}"; 
          nexusArtifactUploader( 
              nexusVersion: NEXUS_VERSION, 
              protocol: NEXUS_PROTOCOL, 
              nexusUrl: NEXUS_URL, 
              groupId: pom.groupId, 
              version: pom.version, 
              repository: NEXUS_REPOSITORY, 
              credentialsId: NEXUS_CREDENTIAL_ID, 
              artifacts: [ 
                  [artifactId: pom.artifactId, 
                  classifier: '', 
                  file: artifactPath, 
                  type: pom.packaging], 
                  [artifactId: pom.artifactId, 
                  classifier: '',
                  file: "pom.xml"
                  type: "pom"]
                  ]
              );
            } else {
                error " *** File: ${artifactpath}, could not be found";
            }
          }
        }
      }
    }
  }
}
}

